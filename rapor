Takım Adı: Columbia (Melis ÇOBAN, Zehra KORKUSUZ, Tuğçe İrem ÇAĞLAYAN) 
Üniversite: Hacettepe Üniversitesi 
Kullanılan Program: R 
Yöntem/Algoritma: XGBoost (objective: “reg:linear”, boosting metodu: “gblinear”) 
Test Hatası: 0.008027123 
Proje Kodları Linki: github.com/ZehraK/Columbia 
Not: Özet raporda bahsedilenler ile ilgili detaylı bilgiye detaylı_rapor.pdf dosyasından, model ile ilgili script kodlara da github üzerinden erişim sağlayabilirsiniz. 
Verilen problemde çözülmeye çalışılan sorun nedir? 
Çözülmeye çalışan problem, geçmişteki veriye bakılarak bir evin özellikleri bilindiğinde ne kadara satılacağını tahmin etmektir. Evlere ilişkin farklı kategorilerde 162 değişken yer almaktadır ve bu değişkenler sahibinden.com aracılığıyla toplanmıştır. sahibinden.com üzerinden ev satışında insanlar ilan verirken, birtakım özelliklerini de dahil ediyorlar. Bazen veri toplama sürecinde hatalar oluşabilir ya da yanlış bilgi girişi yapılabilir ki aslında bu yanlış bilgi girişinin önlenmesi de normal patternler belirlendikten sonra anomali tespiti ile yapılabilir, fakat bu kendi başına ayrıca kapsamlı bir problem olarak yer almaktadır. Biz bu yarışma sürecinde, ev fiyatına en çok etki eden, fiyattaki değişimlerin kaynağını en çok açıklayan özellikleri belirleyip bir tahmin modeli kurmak ve modeli optimize ederek tahminlerimizin gerçek değerlerden sapmasını minimize etmeyi amaçlamaktayız. 
Veri ön işleme için yapılanlar: 
I. Araştırma: Veri ön işleme sürecinde, verideki değerlerin çözülmeye çalışan problemdeki özellikleri doğru tahmin ettiğine ilişkin öngörü kazanmak adına İstanbul emlak piyasasını araştırdık. Bu problemi biz bilgisayar ve modellemeler kullanmadan nasıl çözebiliriz sorusunu sorduk ve emlakçıların, ev alıp satan kişilerin ev fiyatlarını nasıl değerlendirdiğini gözlemledik. Bu araştırma sonucunda kişilerin taban olarak ortalama bölgedeki birim metrekare fiyatından yola çıkarak, evin birtakım özelliklerine göre artıp, azaldığını öğrendik.  Bu özellikler, belli bir bölge seçildikten sonra şehrin en önemli problemlerini hafifleten ulaşımın kolay olduğu, banyo, balkon, manzara gibi faktörlere, iç, dış ve konut özelliklerine göre çeşitlilik göstermektedir. Özelliklerin doğru ya da yanlış temsil edilmesi ile ilgili bulgularda kaynaklanan hatanın kaynağının anlaşılması kullanıcı tanımlı fonksiyonlar kullanılarak bu hataların gözlemleri daha doğru biçimde ifade etmesine olanak sağlamıştır.  II. 2. Aşamada ev fiyatı tahmin modellemesi ile ilgili daha önce yapılmış çalışmaları inceledik. Bu çalışmada öğrendiğimiz ve doğrudan projede kullandığımız bilgi model performansını nasıl değerlendireceğimiz oldu.  III. Veriyi R platformuna yükledikten sonra hedef değişkenimiz olan fiyatın dağılımını, diğer değişkenlerin özellikleri ilgili tanımlayıcı istatistikleri inceledik. Aykırı ya da yanlış ifade edildiğini düşündüğümüz değerlerin kaynağını araştırdık. Sahibinden.com ilanlarını inceledik. Banyo sayısı 6+ olan evlerin genellikle tek banyoya sahip olduğunu, alan bilgisi 0-10 metrekare olan evlerin aslında çok daha farklı değerler aldığını ve zaman zaman bu değerlerin veri girişi sırasında yanıltıcı seçenekler belirtilerek, ilan ile ilgili metin kısmında 
belirtildiğini gözlemledik. Bu aşamada metrekare özelliğindeki hatanın birim yanlışlığından kaynaklandığını düşünüyorduk ki özellikle görselleştirdiğimizde 1000-10000 gibi değerlerden sonra bir kırılma olduğu gözlemledik. Bu hatayı düzeltmek fonksiyon tanımladık. Tanımladığımız fonksiyon sonrasında metrekare ve fiyat arasındaki korelasyon 0,003’den 0,50’ye yakın bir değere yükseldi ve medyan değerleri ile 1,3 çeyreklik değerleri değişmedi, yalnızca maksimum değer azaldı ve ortalama medyana yaklaştı. Cepheyi ifade etmek için cephe bilgisi ile fiyat değişkeni arasında doğrusal bir model oluşturup, standartlaştırmış katsayıları ile cephe puanını ifade edeceğimiz başka bir fonksiyon tanımladık ve böylece değişkenlerin içerdiği bilgiyi azaltmadan değişken sayısını azaltmanın modelin kompleksliğini azaltacağını ve overfitting/underfitting durumlarının önüne geçeceğini düşündük. Mahalle ve ilçe de aynı şekilde çok fazla sayıda faktör seviyesi içeren kategorik değişkenler olduğu için ilçe/mahalle bilgisini nümerik olan ifade etmenin yolunun her bir gözleme bulunduğu ilçedeki, ortalama ilçe fiyat değerlerinin atamanın uygun olduğunu düşündük. Mahalle sayısını çalışmanın sonuna kadar değişkenler arasında yer alırken, ilçe bazında model kurmaya karar verdiğimiz için ilçe ortalama fiyat bilgisini kaldırdık. Tanımlayan fonksiyonların kodlarına GitHub üzerinden erişebilirsiniz. IV. Kayıp gözlemlerin imputasyonu: Eksik gözlemlerin tamamlanmasında mice (multiple imputation with chained equations) paketini kullandık. Rastgele eksik gözlemlerde kategorik değişkenlerin imputasyonu lojistik regresyon ile nümerik değişkenin imputasyonunu pmm(predictive mean matching) ile yaptık. Rastgele olmayan eksik gözlemlerde, balkon gibi eksik gözlemi yeni bir faktör seviyesi olarak kabul ettik. V. Özellik seçimi: Özellik seçiminde mars (çok değişkenli uyarlanabilir regresyon uzanımları) modelini hız, doğruluk ve performans nedeniyle tercih ettik. Parametrik olmayan bir yöntem olduğu için varsayımları olmadan da modelin hatasını verebiliyordu. Özelliklerin belirlenmesinde tahminde hatayı ne kadar düşürdüğünü gözlemleyerek özellikleri seçtik ve seçtiklerimiz arasında da korelasyon matrisini inceleyerek çoklu ilişki probleminin doğurabileceği sorunların önüne geçmeye çalıştık 
Açıklayıcı veri analizi ve veri görselleştirme için yapılanlar: 
I. Açıklayıcı veri analizi ve görselleştirme bir aşamadan daha çok veri ön işleme sürecinden model kurulduktan sonra özelliklerin elenmesi ve model performansının değerlendirilmesini kadar eşlik eden bir süreç oldu. Bu süreçte histogram, boxplot, hist, stripchart ile değişkenlerin tek başına nasıl dağılım gösterdiği ve yine ağırlıklı olarak stripchart kullanarak fiyat ve diğer değişkenlerin arasındaki ilişkilerin görselleştirilmesini sağladık. Kayıp gözlemlerin missmap kullanarak gözlemler belli bir pattern içeriyor mu diye baktık. Kayıp gözlemlerin ardından yeni üretilen değerler ile kayıp gözlemlerin varlığındaki değerlerin arasındaki ilişkiyi gözlemledik.  II. Modele geçmeden önce özellik seçimi sırasında mars (çok değişkenli uyarlanabilir regresyon uzanımları) evImp fonksiyonunu plot ile görselleştirip, modele eklenen özelliklerle gcv (general-cross-validation) vb değerler nasıl değişiyor gözlemledik. Fakat burada modele eklenen her bir özelliğin hatadaki düşmeye katkısınında bir önceki değişkenin de etkisi olduğu için bunun dışında değişkenler arası korelasyonları incelediğimiz corrplot kullandık. Aynı zamanda corrplot ile çoklu ilişki sorununu çözümlemek için seçtiğimiz değişkenler arası ilişkinin 0,7’in altında kalmasına özen gösterdik.   
Model seçimi için yapılanlar ve kullanılan algoritma ile ilgili bilgiler 
I. Neden XGBoost? 
 
XGBoost donanım gücü ve model performansı ile son dönemde oldukça popüler olan, Kaggle’da lider listelerinde %1’e giren pek çok kişinin kullandığı, açık kaynak kodlu bir kütüphanedir. R, Python, C++ gibi yazılım dillerinde kullanılabilir. Kütüphane aynı zamanda değişkenlerin önemini belirleme (feature importance), model parametrelerini optimum performansa göre ayarlamak için crossvalidation özelliklerini kullanan fonksiyonlara da sahiptir.  XGBoost’u zayıf modelleri kullanarak iterasyon ile minimum kayıp fonksiyonuna ulaşma prensibiyle, paralel programlama üzerine kuruludur.    Gradient Boosting, birden fazla model oluşturarak, her modeli bir öncekinin hatasını belirleyerek tahmin etmeden kullanır. XGBoost aslında bir tür Gradient Boosting algoritmasıdır. Algoritmanın en önemli özellikleri arasında modelin yüksek performansı, hatanın minimize edilmesindeki başarısı, hızı, yeni eklenen veri seti ile sürekli olarak öğrenmeye devam edebilmesi ve pek çok modeli boost edebilmesi (karar ağaçları, doğrusal regresyon vb.) yer almaktadır.  Model parametrelerinin de çok fazla olmaması bilgisayar gücü ve zaman maliyetini düşürmektedir.  
 
II. Modelde kullandığımız parametreler:  
 
                        booster = "gblinear",                          nrounds=400,                         eta=0.25,                         gamma=0.01,                          lambda=0.01,                         objective = "reg:linear",                         eval_metric = "rmse",                         watchlist= watchlist,                          Tahmin etmeye çalıştığımız değişken sürekli nümerik olduğu için objektif reg:linear Booster olarak tree ya da gblinear kullanabilirdik fakat doğrusal ilişkileri yakalamada gblinear daha iyi performans gösteriyor hem de modelin maksimum ve minimum değerlerinin dışında kalan değerleri de tahmin edebilme gücünde sahip olduğu için tree yerine seçtik. Öğrenme hızı ve nround eş zamanlı ayarlanması gereken özellikler, öğrenmede default değer 0.3 fakat biz overfittingi dengelemek için nrounds’u artırıp, etayı düşürüp, gamma ve zaman zaman da lamda değerlerini artırarak train ve test hatasını dengelemeye çalıştık. Lambda’yı yalnızca gamma ile bu dengelemeyi sağlayamadığımız az gözlem içeren ilçelerin modellerinde kullandık. III. 39 ilçe olduğu için ve ilçeler kendi içinde daha homojen fiyat dağılımı gösterdiği için ilçe bazında 39 model kurduk.  
 
 
Train ve test hatası ile ilgili bilgi 
I. Model performansı değerlendirilirken bizim seçtiğimiz objektife yönelik birkaç değerlendirme metodu vardı. Bunlardan en yaygın olanları mae(mean absolute error) ve rmse(rooted-mean-square error). Rmse ağırlıklandırılmış ve parabolik olduğu için her zaman mae’den daha yüksek çıkar. Fakat biz rmse’yi tercih ettik çünkü bizim için tahminimizim gerçek değerden 2 birim uzaklaşması, 1 birim uzaklaşmasının 2 katından daha büyüktü ve modelin gerçekten nasıl performans gösterdiğine ilişkin en güvenilir rakamı bulmak istedik. Fiyatların dağılımı da çarpık olduğu için ve yukarıdaki 1-2 kıyaslamasından dolayı ağırlık eklenmesi ve parabolik bir cross validation yöntemi tercih ettik. 
 
II. Model hatasını nasıl hesapladık? 
 
39 model kurduğumuz için 39 hata değeri ortaya çıktı ve bazıları yüksek performans gösterirken bazıları daha düşük performans gösterdi ki bu modeller overfitting/underfitting’e daha yatkındı, yine de gamma ve lambda değerleri ile büyük oranda dengeledik.  Test hatasını hesaplarken aşağıda verilen ağırlıklandırılmış formülü kullandık, fakat yine de her bir modelin gözlem sayısı, hata değerleri, hata değerlerinin sapmasını görmek isterseniz, paylaştığımız GitHub linkinde değerler txt uzantılı dosyada yer almaktadır.  
 
     𝑡𝑒𝑠𝑡 ℎ𝑎𝑡𝑎𝑠𝚤 = ∑ (𝑛𝑟𝑜𝑤(𝑖𝑙𝑐𝑒𝑖))test_rmse 39 𝑘=1 ∑ 𝑛𝑟𝑜𝑤(𝑖𝑙𝑐𝑒𝑖 39 𝑖=1⁄ ) 
 
Bulgular 
Zaman boyutunun fiyattaki değişime etkisi, yıllık 200k ev satılması, zamanla ilçeler arasında emlak endeksi sıralamasının değişmesi 
İstanbul’da ev fiyatları daha sağa çarpık bir dağılım göstermektedir ki daha uygun fiyatlarda yığılması beklenmektedir.   
İstanbul’da her ay ortalama 15-20 bin konut satılıyor, dolayısıyla veri yaklaşık bir yıllık süreci kapsıyor ve zaman boyutu verilmediği için fiyattaki varyansın açıklanamayan kısmının zamana bağlı değişim olabileceğini düşünüyoruz.  
Ev fiyatını etkileyen faktörler temel temel kategorisinde yer alan değişkenlerle birlikte ulaşım, boğaza yakınlık gibi özellikler de bulunduğu bölgeye göre fiyatı etkilemektedir.   
Veri toplama süreçlerinde birimlerin yanlış girilmesinden kaynaklanan hatalı bilgiler sonradan düzeltilse de veri toplama sürecinde gözden geçirilmesi gerekir. 6 banyolu ve 80 metrekare bir ev ya da 0 metrekare gibi veri girişlerinde kontrol sağlanabilir.  
Ev fiyatını düşüren faktörlere hiç değinilmemesi davranışı görülmektedir. Balkon bilgisinin zemin katlarda çoğunlukla bahsedilmemesi buna örnek olarak verilebilir. Aidat ve fiyat ev ile ilgili pek çok bilgi içermektedir. Fakat aidat bilgisi rastgele eksik gözlemlere sahiptir. Bu bilginin doldurulması zorunlu olabilir, böylece ev fiyatıyla ne kadar uyumlu olduğu da ölçülerek fiyatın makul olup olmadığı test edilebilir.  
Kaynaklar 
 
1. https://goktugbeser.com/istanbul-satilik-kiralik-konut-emlak-piyasasi/  
2. https://emlakkulisi.com/11-emlak-piyasasi-istanbulda-buyuyor/378141  
3. https://machinelearningmastery.com/gentle-introduction-xgboost-applied-machine-learning/  
4. https://www.r-graph-gallery.com/  
5.https://www.researchgate.net/publication/322307402_Konut_Fiyatlarini_Etkileyen_Faktorlerin_H edonik_Model_Ile_Belirlenmesi_Eskisehir_Ornegi_Determining_The_Parameters_Of_Housing_Prices _Using_Hedonic_Model_A_Case_Study_In_Eskisehir  
6. http://www.doc.ic.ac.uk/~mpd37/theses/2015_beng_aaron-ng.pdf 8. https://www.r-bloggers.com  
7. https://stats.stackexchange.com/questions/48267/mean-absolute-error-or-root-mean-squarederror?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa 
 
 
